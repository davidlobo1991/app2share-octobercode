<div id="filter-map">
    <div class="row" style="margin: 0 !important;">
        <div id="mapid" style="height:100vh; width: 50%;"></div>

        <div class="filter-list">
            <div id="mapFilter">
                <ul>
                    <li v-for="partnerType in partnerTypesArray">
                        <button :data-type="partnerType.slug" v-html="partnerType.name"
                                v-on:click="filterPartner(partnerType.slug)"
                                class="filter-list__type"
                                :class="{'selected': hasThisFilter(partnerType.slug)}"
                        ></button>
                    </li>
                </ul>

                <form v-on:submit.prevent="searchPartner($event)">
                    <input type="text" placeholder="Buscar..." name="search-offer"/>
                    <input type="submit" value="buscar">
                </form>

                <select v-on:change="setOrderList($event)">
                    <option>Ordenar</option>
                    <option value="name">Nombre</option>
                    <option disabled>Valoraci√≥n</option>
                </select>
            </div>

            <ul>
                <li v-for="offer in computedObj"
                    v-show="hasThisFilter(offer.partner.partner_type.slug) || filteredTypes.length === 0">
                    <img :src="offer.partner.image" style="width: 100px;"/>

                    <img :src="logoPartnerType(offer)"/>
                    <p v-html="getPartnerName(offer)"></p>
                    <span :id="offer.id" v-html="getOffer(offer)"></span>
                    <p v-html="getOfferDescription(offer)"></p>
                    <button v-on:click="linkMap(offer)">Mapa</button>
                </li>
            </ul>

            <button v-show="computedObj.length >= pageLimit" @click="renoveComputedObj()">Show more</button>
        </div>
    </div>
</div>


{% put scripts %}
<script>
    var app = new Vue({
        el: '#filter-map',
        data: {
            offersArray: [],
            partnerTypesArray: [],
            orderList: null,
            offers: '{{ offers|raw }}',
            partnerTypes: '{{ partnerTypes|raw }}',
            map: null,
            mapGroup: L.markerClusterGroup({
                spiderfyOnMaxZoom: false,
                showCoverageOnHover: false,
            }),
            markers: [],
            filteredTypes: [],
            pageLimit: 3,
            computedObj: []
        },

        methods: {
            getComputedObj() {
              return this.pageLimit ? this.offersArray.slice(0, this.pageLimit) : this.offersArray;
            },

            renoveComputedObj() {
              this.pageLimit += 3;
              this.computedObj = this.getComputedObj();
            },

            getOffer(offer) {
                return offer.name;
            },

            getPartnerName(offer) {
                return offer.partner.name;
            },

            getOfferDescription(offer) {
                return offer.description;
            },

            setOrderList(event) {
                let value = event.target.value;
                this.orderList = value;

                this.computedObj = this.computedObj.sort(function (a, b) {
                    return a.name > b.name ? -1 : 1;
                });

                console.log(value);

            },

            linkMap(offer) {
                let linkMarker =
                    this.markers.filter(marker => marker.options.offer.id === offer.id);

                this.centerLeafletMapOnMarker(linkMarker[0]);
                linkMarker[0].openPopup();
            },

            centerLeafletMapOnMarker(marker) {
                let latLngs = [marker.getLatLng()];
                let markerBounds = L.latLngBounds(latLngs);
                this.map.fitBounds(markerBounds, 1, 1);
                this.map.setMaxZoom(14);
            },

            searchPartner(event) {
                let value = event.target['search-offer'].value;
                let scope = this;

                this.markers.forEach(function (marker) {
                    let partnerName = marker.getPopup().options.partnerName;
                    let offerName = marker.getPopup().options.offerName;
                    let searchable = partnerName + ' ' + offerName;

                    let regex = new RegExp(value, 'g');

                    if (searchable.match(regex)) {
                        scope.mapGroup.addLayer(marker);
                    } else {
                        scope.mapGroup.removeLayer(marker);
                    }

                    /* if (marker.filteredTypes.includes(marker.options.slug)) {
                         scope.mapGroup.addLayer(marker);
                     } else {
                         scope.mapGroup.removeLayer(marker);
                     }*/
                });
            },

            filterPartner(partnerType) {
                let scope = this;

                if (this.hasThisFilter(partnerType)) {
                    this.filteredTypes = this.filteredTypes.filter(e => e !== partnerType);
                } else {
                    this.filteredTypes.push(partnerType);
                }

                if (this.filteredTypes.length > 0) {
                    this.markers.forEach(function (marker) {
                        if (scope.filteredTypes.includes(marker.options.slug)) {
                            scope.mapGroup.addLayer(marker);
                        } else {
                            scope.mapGroup.removeLayer(marker);
                        }
                    });

                } else {
                    this.markers.forEach(function (marker) {
                        scope.mapGroup.addLayer(marker);
                    });
                }
            },

            logoPartnerType(offer) {
                let partnerType = this.partnerTypesArray
                    .filter(partner => partner.id === offer.partner.partner_type.id);

                return partnerType[0].logo.path;
            },

            hasThisFilter(partnerType) {
                return this.filteredTypes.includes(partnerType);
            }
        },

        mounted: function () {
            this.offers = this.offers.replace(/\\n/g, "\\n")
                .replace(/\\'/g, "\\'")
                .replace(/\\"/g, '\\"')
                .replace(/\\&/g, "\\&")
                .replace(/\\r/g, "\\r")
                .replace(/\\t/g, "\\t")
                .replace(/\\b/g, "\\b")
                .replace(/\\f/g, "\\f");
            this.offers = this.offers.replace(/[\u0000-\u0019]+/g, "");

            this.partnerTypes = this.partnerTypes.replace(/\\n/g, "\\n")
                .replace(/\\'/g, "\\'")
                .replace(/\\"/g, '\\"')
                .replace(/\\&/g, "\\&")
                .replace(/\\r/g, "\\r")
                .replace(/\\t/g, "\\t")
                .replace(/\\b/g, "\\b")
                .replace(/\\f/g, "\\f");
            this.partnerTypes = this.partnerTypes.replace(/[\u0000-\u0019]+/g, "");

            this.offersArray = JSON.parse(this.offers);
            this.computedObj = this.getComputedObj();
            this.partnerTypesArray = JSON.parse(this.partnerTypes);

            for (var i = 0; i < this.offersArray.length; i++) {
                let repeatedPartner = this.markers.filter(e => e.options.partner === this.offersArray[i].partner.id);
                if (repeatedPartner.length > 0) {
                    let content = repeatedPartner[0]._popup.getContent() + '<br/><br/>';
                    content += this.offersArray[i].name + '<br/>';
                    content += 'Ahorro de ' + this.offersArray[i].spar + '<br/>';
                    content += '<a href="/oferta/' + this.offersArray[i].id + '" target="_blank">Link a oferta</a>';
                    repeatedPartner[0]._popup.setContent(content);
                    continue;
                }

                let content = '<img src="' + this.offersArray[i].partner.image + '">';

                content += this.offersArray[i].partner.name + '<br/><br/>';
                content += this.offersArray[i].name + '<br/>';
                content += 'Ahorro de ' + this.offersArray[i].spar + '<br/>';
                content += '<a href="/oferta/' + this.offersArray[i].id + '" target="_blank">Link a oferta</a>';

                let popup = L.popup({
                    closeButton: true,
                    className: 'map-popup',
                    offerName: this.offersArray[i].name,
                    partnerName: this.offersArray[i].partner.name
                }).setContent(content);

                let logo = this.logoPartnerType(this.offersArray[i]);

                let offerIcon = L.icon({
                    className: this.offersArray[i].partner.partner_type.slug,
                    iconUrl: logo,
                    iconSize: [30, 38], // size of the icon
                    shadowSize: [50, 64], // size of the shadow
                });

                let marker = L.marker(
                    [
                        this.offersArray[i].partner.latitude,
                        this.offersArray[i].partner.longitude
                    ], {
                        icon: offerIcon,
                        slug: this.offersArray[i].partner.partner_type.slug,
                        offer: this.offersArray[i],
                        partner: this.offersArray[i].partner.id
                    }
                ).bindPopup(popup).addTo(this.mapGroup);

                this.markers.push(marker);
            }

            let mbAttr = '',
                mbUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

            let streets = L.tileLayer(mbUrl, {id: 'mapbox.streets', attribution: mbAttr});

            this.map = L.map('mapid', {
                attributionControl: false,
                center: [39.5695, 2.9459],
                zoom: 10,
                layers: [streets, this.mapGroup]
            });

            var gps = new L.Control.Gps({
                autoActive: true,
                autoCenter: true
            });

            gps.addTo(this.map);
        }
    });
</script>
{% endput %}
